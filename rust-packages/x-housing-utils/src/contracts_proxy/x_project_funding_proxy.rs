// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct XProjectFundingProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for XProjectFundingProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = XProjectFundingProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        XProjectFundingProxyMethods { wrapped_tx: tx }
    }
}

pub struct XProjectFundingProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> XProjectFundingProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        coinbase: Arg0,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&coinbase)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> XProjectFundingProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> XProjectFundingProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn init_first_x_project<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<EgldOrEsdtTokenIdentifier<Env::Api>>,
        Arg3: ProxyArg<BigUint<Env::Api>>,
        Arg4: ProxyArg<u64>,
    >(
        self,
        xproject_template: Arg0,
        x_housing_address: Arg1,
        funding_token_id: Arg2,
        funding_goal: Arg3,
        funding_deadline: Arg4,
    ) -> TxTypedCall<Env, From, To, (), Gas, XProjectData<Env::Api>> {
        self.wrapped_tx
            .raw_call("init_first_x_project")
            .argument(&xproject_template)
            .argument(&x_housing_address)
            .argument(&funding_token_id)
            .argument(&funding_goal)
            .argument(&funding_deadline)
            .original_result()
    }

    pub fn deploy_x_project<
        Arg0: ProxyArg<EgldOrEsdtTokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<u64>,
    >(
        self,
        funding_token_id: Arg0,
        funding_goal: Arg1,
        funding_deadline: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, XProjectData<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("deployXProject")
            .argument(&funding_token_id)
            .argument(&funding_goal)
            .argument(&funding_deadline)
            .original_result()
    }

    pub fn fund_project<
        Arg0: ProxyArg<usize>,
        Arg1: ProxyArg<OptionalValue<usize>>,
    >(
        self,
        project_id: Arg0,
        referrer_id: Arg1,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("fundProject")
            .argument(&project_id)
            .argument(&referrer_id)
            .original_result()
    }

    pub fn unlock_xht(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("unlockXht")
            .original_result()
    }

    pub fn xht(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, TokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getXhtID")
            .original_result()
    }

    pub fn lk_xht(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, TokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getLkXhtID")
            .original_result()
    }

    pub fn register_lk_xht_token(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("registerLkXht")
            .original_result()
    }

    pub fn set_lkxht_local_roles(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setLkXhtLocalRoles")
            .original_result()
    }

    pub fn set_x_project_token<
        Arg0: ProxyArg<usize>,
        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,
    >(
        self,
        project_id: Arg0,
        name: Arg1,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("set_x_project_token")
            .argument(&project_id)
            .argument(&name)
            .original_result()
    }

    pub fn claim_x_project_tokens<
        Arg0: ProxyArg<usize>,
    >(
        self,
        project_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("claimXProjectToken")
            .argument(&project_id)
            .original_result()
    }

    pub fn x_project_token_id<
        Arg0: ProxyArg<usize>,
    >(
        self,
        project_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, TokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getXProjectTokenID")
            .argument(&project_id)
            .original_result()
    }

    pub fn x_project_address<
        Arg0: ProxyArg<usize>,
    >(
        self,
        project_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getXProjectAddress")
            .argument(&project_id)
            .original_result()
    }

    pub fn x_project_data<
        Arg0: ProxyArg<usize>,
    >(
        self,
        project_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, XProjectData<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getXProjectData")
            .argument(&project_id)
            .original_result()
    }

    pub fn all_x_projects(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedVec<Env::Api, XProjectData<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAllXProjectData")
            .original_result()
    }
}

#[type_abi]
#[derive(TopDecode, TopEncode, ManagedVecItem, NestedDecode, NestedEncode)]
pub struct XProjectData<Api>
where
    Api: ManagedTypeApi,
{
    pub id: usize,
    pub address: ManagedAddress<Api>,
    pub funding_goal: BigUint<Api>,
    pub funding_deadline: u64,
    pub funding_token_id: EgldOrEsdtTokenIdentifier<Api>,
    pub collected_funds: BigUint<Api>,
}
